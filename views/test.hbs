{{!< ./default_layout}}

<h1> Test all the things! </h1>

<p>Logged in: {{user.email}}</p>

<a href="/login">Log in</a>

<form class="dropzone">
	<input type="hidden" name="key" value="uploads/temp/${filename}">
	<input type="hidden" name="AWSAccessKeyId" value="{{ s3.s3Key }}"> 
	<input type="hidden" name="acl" value="public-read"> 
	<input type="hidden" name="success_action_status" value="201">
	<input type="hidden" name="policy" value="{{ s3.s3Policy64 }}">
	<input type="hidden" name="signature" value="{{ s3.s3Signature }}">
	<input type="hidden" name="Content-Type" value="image/jpeg">
</form>

<button id="uploadImages">Upload</button>

<script type="text/javascript">
'use strict';


// test loading a case from casefil.es

$.get('http://localhost:8080/api/study/load/52960b463e31390f00000025', function(res){
	if(res._id === '52960b463e31390f00000025'){ console.log('OK: study successfully loaded')}
	else { console.log('FAIL', res)}
})

// test getting s3 upload credentials

$.get('http://localhost:8080/api/upload/getCredentials?apikey=52f7caabff074a371800000b', function(res){
	if(res.s3Bucket === 'elasticbeanstalk-us-east-1-843279806438'){ console.log('OK: s3 creds returned')}
	else { console.log('FAIL', res)}
})

$.post('/makeAdmin', {userId: '52f6b898e426a9080ce53adf'})
	.done(function(res){
		if(res === 'User already administrator' || 'User set as administrator'){ console.log('OK: User set as administrator') }
		else { console.log('FAIL: ', res) }
	})
	.fail(function(err){
		console.log('FAIL', err)
	})

Dropzone.autoDiscover = false
var dropzone = new Dropzone('.dropzone', {
		url: '{{s3.s3URL}}',
		maxFilesize: 100,
		paramName: 'file',
		maxThumbnailFilesize: 5,
		autoProcessQueue: false,
		dictDefaultMessage: '<div class="msg-primary">Drop files here to upload</div><div class="msg-secondary">(or click)</div>'
	})
	.on('addedfile', function(file){
		$(file.previewElement).find('.dz-success-mark,.dz-error-mark').hide()
	})
	.on('totaluploadprogress', function(total, totalBytes, totalBytesSent){
		console.log(total)
	})
	.on('error', function(file, error){
		console.log('error: ', error)
	})
	.on('success', function(file, response){
		response = response.split('Location')[1].slice(1, -2)
		console.log(response)
		$(file.previewElement).find('.dz-success-mark').show()
	})
	.on('complete',function(){
		if (this.getUploadingFiles().length > 0){
			this.processQueue()
			return false
		}
		console.log('complete')
	})

$('#uploadImages').on('click', function(){
	dropzone.processQueue()
})

/*$('#uploadImages').on('submit', function(e){
	e.preventDefault()

	var formData = new FormData(e.target),
		onProgress = function(e){
			console.log(e)
		},
		onSuccess = function(e){
			console.log(e)
		},
		onError = function(e){
			console.log(e)
		}

	$.ajax({
		url: '{{s3.s3URL}}',
		xhr: function() {  // Custom XMLHttpRequest
			var myXhr = $.ajaxSettings.xhr();
			if(myXhr.upload){ // Check if upload property exists
				myXhr.upload.addEventListener('progress', onProgress, false); // For handling the progress of the upload
			}
			return myXhr;
		},
		success: onSuccess,
		error: onError,
		data: formData,
		//Options to tell jQuery not to process data or worry about content-type.
		cache: false,
		contentType: false,
		processData: false
	})
})*/

/*$.post('/saveImages', images)
	.done(function(res){
		console.log(res)
	})
	.fail(function(err){
		console.log('FAIL', err)
	})

var quiz
$.post('/saveQuiz', {userId: '52f6b898e426a9080ce53adf'})
	.done(function(res){
		console.log(res)
	})
	.fail(function(err){
		console.log('FAIL', err)
	})*/

</script>